import ij.IJ;
import ij.ImagePlus;
import ij.process.ByteProcessor;
import ij.gui.ShapeRoi;
import java.awt.image.BufferedImage;
import java.awt.geom.AffineTransform;
import java.awt.image.AffineTransformOp;
import java.awt.Color;
import org.micromanager.utils.ReportingUtils;
import ij.process.ImageProcessor;
import org.micromanager.utils.ImageUtils;
import java.awt.geom.Point2D;
import org.micromanager.utils.ImageUtils;
import org.micromanager.utils.MathFunctions;

String slm;
int slmWidth;
int slmHeight;
int diameter;

public void addSpot(ImageProcessor proc, x, y, dia) {
	proc.fillOval(x-dia/2, y-dia/2, dia, dia);
}
// then use:
//imgp.updateImage();
//imgp.getCanvas().repaint();

		
public void displaySpot(int x, int y) {
	proc = new ByteProcessor(slmWidth, slmHeight);
	proc.setColor(Color.black);
	proc.fill();
	proc.setColor(Color.white);
	addSpot(proc,x,y, diameter);
	img = new ImagePlus("",proc);
	//img.show();
	try {
		mmc.setSLMImage(slm, proc.getPixels());
		mmc.displaySLMImage(slm);
	} catch (Throwable e) {
		print("DMD not connecting properly.");
	}
}

public Point measureSpot(Point dmdPt) {
	displaySpot(dmdPt.x,dmdPt.y);
	//mmc.sleep(200);
	gui.snapSingleImage();
	proc = IJ.getImage().getProcessor();
	maxPt = ImageUtils.findMaxPixel(proc);
	return maxPt;
}

public void mapSpot(Map spotMap, Point ptSLM) {
	ptSLMDouble = new Point2D.Double(ptSLM.x, ptSLM.y);
	ptCam = measureSpot(ptSLM);
	ptCamDouble = new Point2D.Double(ptCam.x, ptCam.y);
	spotMap.put(ptCamDouble, ptSLMDouble);
}

public void mapSpot(Map spotMap, Point2D.Double ptSLM) {
	mapSpot(spotMap, new Point((int) ptSLM.x, (int) ptSLM.y));
}

public AffineTransform getFirstApproxTransform() {
	x = slmWidth/2;
	y = slmHeight/2;

	s = 50;
	spotMap = new HashMap();

	mapSpot(spotMap, new Point(x,y));
	mapSpot(spotMap, new Point(x,y+s));
	mapSpot(spotMap, new Point(x+s,y));
	mapSpot(spotMap, new Point(x,y-s));
	mapSpot(spotMap, new Point(x-s,y));

	return MathFunctions.generateAffineTransformFromPointPairs(spotMap);
}

public AffineTransform getFinalTransform(AffineTransform firstApprox) {
	spotMap2 = new HashMap();
	imgWidth = (int) mmc.getImageWidth();
	imgHeight = (int) mmc.getImageHeight();

	s = 30;
	dmdPoint = firstApprox.transform(new Point2D.Double((double) s,(double) s),null);
	mapSpot(spotMap2, dmdPoint);
	dmdPoint = firstApprox.transform(new Point2D.Double((double) imgWidth-s,(double) s),null);
	mapSpot(spotMap2, dmdPoint);
	dmdPoint = firstApprox.transform(new Point2D.Double((double) imgWidth-s,(double) imgHeight-s),null);
	mapSpot(spotMap2, dmdPoint);
	dmdPoint = firstApprox.transform(new Point2D.Double((double) s,(double) imgHeight-s),null);
	mapSpot(spotMap2, dmdPoint);
	
	return MathFunctions.generateAffineTransformFromPointPairs(spotMap2);
}

update();

slm = mmc.getSLMDevice();
slmWidth = (int) mmc.getSLMWidth(slm);
slmHeight = (int) mmc.getSLMHeight(slm);
diameter = 5;

print("starting calibration...");
firstApprox = getFirstApproxTransform();
trans = getFinalTransform(firstApprox);
print("finished calibration.");
